package ru.yandex.practicum.filmorate.service;

import jakarta.validation.ValidationException;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.filmorate.exception.NotFoundException;
import ru.yandex.practicum.filmorate.model.Film;
import ru.yandex.practicum.filmorate.storage.FilmStorage;
import ru.yandex.practicum.filmorate.storage.UserStorage;

import java.time.LocalDate;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class FilmService {
    private final FilmStorage filmStorage;
    private final UserStorage userStorage;

    private static final LocalDate CINEMA_BIRTHDAY = LocalDate.of(1895, 12, 28);

    public Film add(Film film) {
        validate(film);
        return filmStorage.add(film);
    }

    public Film update(Film film) {
        validate(film);
        return filmStorage.update(film);
    }

    public Film getById(Long id) { // üëà –∑–∞–º–µ–Ω–∏–ª–∏ int ‚Üí Long
        Film f = filmStorage.getById(id);
        if (f == null) {
            throw new NotFoundException("–§–∏–ª—å–º " + id + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        return f;
    }

    public Collection<Film> getAll() {
        return filmStorage.getAll();
    }

    public void addLike(Long filmId, Long userId) { // üëà –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Long
        Film film = getById(filmId); // 404 –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å–º–∞
        if (userStorage.getById(userId) == null) { // 404 –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        film.getLikes().add(userId);
        filmStorage.update(film);
    }

    public void removeLike(Long filmId, Long userId) { // üëà –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Long
        Film film = getById(filmId);
        if (userStorage.getById(userId) == null) {
            throw new NotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
        film.getLikes().remove(userId);
        filmStorage.update(film);
    }

    public List<Film> getPopular(int count) {
        return filmStorage.getAll().stream()
                .sorted((f1, f2) -> Integer.compare(f2.getLikes().size(), f1.getLikes().size()))
                .limit(count)
                .collect(Collectors.toList());
    }

    private void validate(Film film) {
        if (film.getReleaseDate() != null && film.getReleaseDate().isBefore(CINEMA_BIRTHDAY)) {
            throw new ValidationException("–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ 28 –¥–µ–∫–∞–±—Ä—è 1895 –≥–æ–¥–∞");
        }
    }
}