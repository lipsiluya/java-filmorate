-- Таблица жанров
CREATE TABLE IF NOT EXISTS genre (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255)
);

-- Таблица рейтингов
CREATE TABLE IF NOT EXISTS mpa (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255)
);

-- Таблица фильмов
CREATE TABLE IF NOT EXISTS films (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
name VARCHAR(255),
description TEXT,
duration INTEGER,
genre_id INTEGER,
mpa_id INTEGER,
release_date DATE,
CONSTRAINT fk_film_genre FOREIGN KEY (genre_id) REFERENCES genre(id),
CONSTRAINT fk_film_mpa FOREIGN KEY (mpa_id) REFERENCES mpa(id)
);

-- Связующая таблица фильм-жанр (многие ко многим)
CREATE TABLE IF NOT EXISTS film_genres (
    film_id INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    CONSTRAINT pk_film_genre PRIMARY KEY (film_id, genre_id),
    CONSTRAINT fk_fg_film FOREIGN KEY (film_id) REFERENCES films(id),
    CONSTRAINT fk_fg_genre FOREIGN KEY (genre_id) REFERENCES genre(id)
);

-- Таблица пользователей
CREATE TABLE IF NOT EXISTS users (
id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
login VARCHAR(255) NOT NULL,
name VARCHAR(255),
email VARCHAR(255) NOT NULL,
birthday DATE
);

-- Таблица лайков фильмов пользователями
CREATE TABLE IF NOT EXISTS film_likes (
user_id INTEGER NOT NULL,
film_id INTEGER NOT NULL,
CONSTRAINT pk_film_likes PRIMARY KEY (user_id, film_id),
CONSTRAINT fk_fl_users FOREIGN KEY (user_id) REFERENCES users(id),
CONSTRAINT fk_fl_film FOREIGN KEY (film_id) REFERENCES films(id)
);

-- Таблица дружбы между пользователями
CREATE TABLE IF NOT EXISTS friendship (
user_id INTEGER NOT NULL,
friend_id INTEGER NOT NULL,
CONSTRAINT pk_friendship PRIMARY KEY (user_id, friend_id),
CONSTRAINT fk_fs_user FOREIGN KEY (user_id) REFERENCES users(id),
CONSTRAINT fk_fs_friend FOREIGN KEY (friend_id) REFERENCES users(id)
);

